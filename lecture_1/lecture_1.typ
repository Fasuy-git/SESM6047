#import "../template.typ": *

= Lecture 1

== Principle of Minimum Total Potential Energy (PMTPE)

The principle of minimum total potential energy is a concept that underpins the whole of FEA. It states that a structure will deform or displace to a position which minimizes the total potential energy of that structure. To build up to a mathematical definition of PMTPE, the total potential energy can be written as *@1-total-potential-energy*.

$
  Pi = U + V
$<1-total-potential-energy>

Where:

- *$Pi$*: The total potential energy ($J$).
- *$U$*: The stored elastic strain energy ($J$).
- *$V$*: The potential energy (negative of the work done $-W$ by external forces) ($J$).

PMTE then states that if we have an infinite number of possible responses to a system, the correct solution will have the lowest energy out of the infinite solutions. Mathematically, we are looking for a minimum for the value of $Pi$ which yields the *@1-pmtpe-condition*.

$
  delta Pi = 0 quad therefore quad U = -V
$<1-pmtpe-condition>

== Deriving the Deformation Behavior of Spring

We can apply PMTPE to a 1D spring in order to yield the equation $F = k q$. To start the scenario is defined in *@1-1d-spring-diagram*.

#figure(
  cetz.canvas({
    import "@preview/mechanical-system-cetz-34j:0.1.0": spring, wall
    import cetz.draw: *
    import circuiteria: *

    spring((5.5, 0), name: "spring", n: 7)
    wall((5, -1), b: (5, 1), name: "wall", inverse: true, inverse-lines: false)
    circle((7, 0), radius: 0.1, name: "end-node")

    line("spring", "wall")
    line("spring", "end-node")
    line("end-node", (9, 0), stroke: blue)
    line("end-node", (7, -1.5), (9, -1.5), stroke: red)

    mark((9.4, 0), 0deg, symbol: "stealth", scale: 2, stroke: blue)
    mark((9.4, -1.5), 0deg, symbol: "stealth", scale: 2, stroke: red)

    content("spring.bottom", $k$)
    content((8, -0.3), $F$)
    content((8, -1.8), $q$)
  }),
  caption: [General 1D spring attatched to wall.],
  supplement: [Figure],
  kind: figure,
)<1-1d-spring-diagram>

Where:
- *$k$*: Spring stiffness ($N / m$)
- *$F$*: Force ($N$)
- *$q$*: Displacement ($m$)

Note that $q$ is described as a *generalized coordinate* or a *degree of freedom* (DoF). From the scenario defined in *@1-1d-spring-diagram*, an expression for the total potential energy of the system can be generated, shown in *@1-1d-spring-total-energy*.

$
  U = 1/2 k q^2 quad V = -W = -F q \
  therefore quad Pi = 1/2 k q^2 -F q
$<1-1d-spring-total-energy>

PMTPE implies that the true solution for the equation is given when the expression for the total potential energy is derived and then set to zero, this is shown in *@1-deformation-spring*.

$
  (diff Pi(q))/(diff q) = 0 quad arrow.r quad (diff Pi(q))/(diff q) = 1/2 k times 2 q - F =0
  \
  F = k q
$<1-deformation-spring>

== Deriving the Deformation Behavior of Two Springs

Similarly to when we had one spring, we can apply PMTPE to two springs joined together and see their behavior under a pair of loads, this scenario is defined in *@1-1d-2-spring-diagram*.

#figure(
  cetz.canvas({
    import "@preview/mechanical-system-cetz-34j:0.1.0": spring, wall
    import cetz.draw: *
    import circuiteria: *

    spring((0.5, 0), name: "spring_1", n: 7, stroke: red)
    spring((2.5, 0), name: "spring_2", n: 7, stroke: blue)

    wall((0, -1), b: (0, 1), name: "wall", inverse: true, inverse-lines: false)

    circle((2, 0), radius: 0.1, name: "node_1", stroke: red)
    circle((4, 0), radius: 0.1, name: "node_2", stroke: blue)

    line("spring_1", "wall", stroke: red)
    line("spring_1", "node_1", stroke: red)

    line("node_1", "spring_2", stroke: blue)
    line("spring_2", "node_2", stroke: blue)

    line("node_1", (2, -1.2), (3, -1.2), stroke: red)
    line("node_1", (2, -2.4), (3, -2.4), stroke: red)

    mark((3.4, -1.2), 0deg, symbol: "stealth", scale: 2, stroke: red)
    mark((3.4, -2.4), 0deg, symbol: "stealth", scale: 2, stroke: red)

    line("node_2", (4, -1.2), (5, -1.2), stroke: blue)
    line("node_2", (4, -2.4), (5, -2.4), stroke: blue)

    mark((5.4, -1.2), 0deg, symbol: "stealth", scale: 2, stroke: blue)
    mark((5.4, -2.4), 0deg, symbol: "stealth", scale: 2, stroke: blue)

    content((1.1, -0.6), $k_1$)
    content((3.1, -0.6), $k_2$)

    content((2.7, -1.7), $F_1$)
    content((2.7, -2.8), $q_1$)

    content((4.7, -1.7), $F_2$)
    content((4.7, -2.8), $q_2$)
  }),
  caption: [Two 1D spring attached to one another and a wall.],
  supplement: [Figure],
  kind: figure,
)<1-1d-2-spring-diagram>

Now there are two unknowns of the system ($q_1, q_2$), which means there must be two equations to solve this scenario fully. This is generated by applying the PMTPE to both of the unknowns. First the values for $U$ and $V$ are defined, shown in *@1-total-energy-2-springs*.

$
  U = 1/2 k_1 q_1^2 + 1/2 k_2 (q_2 - q_1)^2
  quad quad
  V = -F_1 q_1 - F_2 q_2
  \ therefore quad quad
  Pi(q_1, q_2) = 1/2 k_1 q_1^2 + 1/2 k_2 (q_2 - q_1)^2 - (F_1 q_1 + F_2 q_2)
$<1-total-energy-2-springs>

Note that in *@1-total-energy-2-springs*, the strain energy for the second spring has a subtracted $q_1$ term within it, this is due to the displacement $q_2$ being offset by $q_1$ when spring 1 is deformed. The solution to *@1-total-energy-2-springs* can be found by applying the PMTPE and deriving with respect to the unknown deformation variable, these steps are shown in *@1-simultaneous-2-springs*.

$
  (diff Pi)/ (diff q_1) = k_1 q_1 + k_2 (q_2 -q_1) - F_1 = 0
  quad arrow.r quad F_1 = (k_1 + k_2)q_1 + k_2 q_2
  \
  (diff Pi)/ (diff q_2) = 0 + k_2(q_2 -q_1) -F_2 = 0
  quad arrow.r quad F_2 = -k_2 q_1 + k_2 q_2
$<1-simultaneous-2-springs>

*@1-simultaneous-2-springs* is a pair of linear simultaneous equations and therefore the matrix method can be used to solve this system of equations shown in *@1-2-springs-matrix*.

$
  mat((k_1 +k_2), -k_2; -k_2, k_2)_(2 times 2)vec(q_1, q_2)_(2 times 1) = vec(F_1, F_2)_(2 times 1)
  quad arrow.r quad [K]_(2 times 2) {q}_(2 times 1) = {F}_(2 times 1)
$<1-2-springs-matrix>

Where:
- *$[K]$*: Stiffness matrix
- *${q}$*: Displacement vector
- *${F}$*: Force vector

Note that *@1-2-springs-matrix* can then be solved using matrix inversion ${q}_(2 times 1) = [K]_(2 times 2)^(-1) {F}_(2 times 1)$.


== Deriving deformation Behavior of a General Spring

More useful than the previous two examples, we can derive an expression for the deformation of a general spring in space, this scenario is shown in

#figure(
  cetz.canvas({
    import "@preview/mechanical-system-cetz-34j:0.1.0": spring, wall
    import cetz.draw: *
    import circuiteria: *

    spring((0.5, 0), name: "spring_1", n: 7)

    circle((0, 0), radius: 0.1, name: "node_1", stroke: red)
    circle((2, 0), radius: 0.1, name: "node_2", stroke: blue)

    line("spring_1", "node_1")
    line("spring_1", "node_2")

    line("node_1", (0, -1.2), (1, -1.2), stroke: red)
    line("node_1", (0, -2.4), (1, -2.4), stroke: red)

    mark((1.4, -1.2), 0deg, symbol: "stealth", scale: 2, stroke: red)
    mark((1.4, -2.4), 0deg, symbol: "stealth", scale: 2, stroke: red)

    line("node_2", (2, -1.2), (3, -1.2), stroke: blue)
    line("node_2", (2, -2.4), (3, -2.4), stroke: blue)

    mark((3.4, -1.2), 0deg, symbol: "stealth", scale: 2, stroke: blue)
    mark((3.4, -2.4), 0deg, symbol: "stealth", scale: 2, stroke: blue)

    content((1.1, -0.6), $k_1$)

    content((0.7, -1.7), $F_1$)
    content((0.7, -2.8), $q_1$)

    content((2.7, -1.7), $F_2$)
    content((2.7, -2.8), $q_2$)
  }),
  caption: [Entirely general 1D spring attached in free space.],
  supplement: [Figure],
  kind: figure,
)<1-general-spring-diagram>

Now that the scenario is defined, it is possible to write the expression for the strain energy of the system, this is shown in *@1-strain-energy-general-spring*.

$
  U = 1/2 k_1(q_2 - q_1)^2 quad arrow.r quad U = 1/2 vec(q_1, q_2)_(1 times 2)^T mat(k_1, -k_1; -k_1, k_1)_(2 times 2) vec(q_1, q_2)_(2 times 1)
$<1-strain-energy-general-spring>

Note that the equation for $U$ can also be written in the matrix form shown on the left of *@1-strain-energy-general-spring*. This form can be written in shorthand as $U = 1/2 {q}_(1 times 2)^T [K]_(2 times 2){q}_(2 times 1)$.
